<div id="myModal" class="modal">
  <div class="modal-content">
    <p class="modal-text" id="modalMessage"></p>
    <%= button_to "スキル編集ページに戻る", edit_category_skill_path(@category, @skill), method: :get, data: { turbo: false, turbolinks: false }, id: "backButton" %>
  </div>
</div>
<div class="categories-container">
  <% @categories.each do |category| %>
    <div class="category-container category-<%= category.id %>">
      <div class="category-area-and-button">
        <div class="category-area">
          <p class="category-name"><%= category.name %></p>
          <hr class="underline">
        </div>
        <div class="add-button">
          <button class="add-skill-button" data-category-id="<%= category.id %>"
          data-turbo="false">スキルを追加する</button>
        </div>
      </div>
      <table>
        <thead>
          <tr>
            <th>習得スキル</th>
            <th>習得レベル</th>
            <th></th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <% category.skills.each do |skill| %>
            <tr data-category-id="<%= category.id %>" data-skill-id="<%= skill.id %>" data-skill-name="<%= skill.name %>" data-skill-level="<%= skill.skill_level %>">
              <td><%= skill.name %></td>
              <%= form_tag category_skill_path(category, skill), method: :patch, style: "display:flex;" , id: "update-form", data: { turbo: false, turbolinks: false } do %>
                <td>
                  <%= select_tag "skill[skill_level]", options_for_select([['選択してください', nil]] + (0..100).map { |num| [num.to_s, num] }, selected: skill.skill_level), class: "skill-level-tag", data: { turbolinks: false } %>
                  <span class="triangle-arrow"></span>
                </td>
                <td><%= submit_tag "習得レベルを保存する", class: "update-button", data: { id: @skill.id, turbolinks: false } %></td>
              <% end %>
              <td>
                <%= form_tag category_skill_path(category, skill), method: :delete, data: { confirm: '本当に削除しますか？' }, style: "display:flex;", id: "delete-form", data: { turbo: false, turbolinks: false } do %>
                  <%= submit_tag "スキルを削除する", class: "delete-button", data: { turbolinks: false } %>
                <% end %>
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  <% end %>
</div>

<script>

  //モーダルの表示
  function showModal(skillName) {
    const modal = document.getElementById('myModal');
    const modalMessage = modal.querySelector('#modalMessage');
    console.log('モーダルへ送られてきたSkill Name:', skillName);

    const fullMessage = `${skillName}のスキルレベルを保存しました!`;
    modalMessage.textContent = fullMessage;

    modal.style.display = 'block';
  }

  // カテゴリ毎のスキル追加ページへ遷移
  const addSkillButtons = document.querySelectorAll('.add-skill-button');
  addSkillButtons.forEach(button => {
    button.addEventListener('click', () => {
      const categoryId = button.getAttribute('data-category-id');
      window.location.href = `/categories/${categoryId}/skills/new`;
    });
  });

  //スキルレベルのUpdate処理
  document.addEventListener('DOMContentLoaded', function() {
    const updateForm = document.getElementById('update-form');
    const updateButtons = document.querySelectorAll('.update-button');

    //update-buttonのクリックイベント
    updateButtons.forEach(button => {
      button.addEventListener('click', function(event) {
        event.preventDefault(); // デフォルトのフォーム送信をキャンセル

        const categoryId = button.closest('tr').getAttribute('data-category-id');
        const skillId = button.closest('tr').getAttribute('data-skill-id');
        const skillName = button.closest('tr').getAttribute('data-skill-name');
        const skillLevel = button.closest('tr').getAttribute('data-skill-level');
        // console.log("data-id属性から取得したSkill ID:", skillId);

        // フォームのデータを取得
        const formData = new FormData(updateForm);
        formData.append('category_id', categoryId);
        console.log('フロントからのcategory_id', categoryId);
        formData.append('skill_id', skillId);
        console.log('フロントからのskill_id', skillId);
        formData.append('skill_name', skillName);
        console.log('フロントからのskill_name', skillName);
        formData.append('skill_level', skillLevel);
        console.log('フロントからのskill_level', skillLevel);
        console.log(formData);
        // console.log(updateForm.action);
        // console.log('formDataで取得したSkill ID:', skillId);
        //  formData.append('_method', 'PATCH');

        // Ajaxリクエストで更新処理を非同期で実行
        fetch(updateForm.action, {
          method: 'PATCH',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const skillName = data.skill_name;
            console.log('バックエンドからのskillName', skillName);
            const skillLevel = data.skill_level;
            console.log('バックエンドからのskillLevel', skillLevel);

            showModal(skillName);
          }
        })
        .catch(error => {
          console.error(error);
        });
      });
    });
  });

  // document.addEventListener('DOMContentLoaded', function() {
  //   const deleteForm = document.getElementById('delete-form');
  //   // フォームのデータを削除
  //   deleteForm.addEventListener('submit', function(event) {
  //     event.preventDefault(); // デフォルトのフォーム送信をキャンセル

  //     // フォームのデータを取得
  //     const formData = new FormData(deleteForm);
  //     console.log(deleteForm.action);

  //     // Ajaxリクエストで更新処理を非同期で実行
  //     fetch(deleteForm.action, {
  //       method: 'DELETE',
  //       body: formData
  //     })
  //     .then(response => response.json())
  //     .then(data => {
  //       if (data.success) {
  //         showModal(data.message);
  //       }
  //     })
  //     .catch(error => {
  //       console.error(error);
  //     });
  //   });
  // });

</script>
